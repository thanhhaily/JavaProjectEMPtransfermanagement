/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import databaseaccess.EmployeeDAOImp;
import databaseaccess.ProjectDAOImp;
import databaseaccess.TransferDAOImp;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import model.Transfer;

/**
 *
 * @author EnablePassword
 */
public class frmRequestTransfer extends javax.swing.JDialog {

    DefaultComboBoxModel model1, model2;
    ProjectDAOImp projectObj;
    EmployeeDAOImp empObj;
    TransferDAOImp transferObj;

    DefaultListModel listLeft, listRight;

    public static java.util.Date fromDateToRequest, toDateToRequest;

    /**
     * Creates new form frmRequestTransfer
     */
    public frmRequestTransfer(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        projectObj = new ProjectDAOImp();
        empObj = new EmployeeDAOImp();
        transferObj = new TransferDAOImp();

        listLeft = new DefaultListModel();
        listRight = new DefaultListModel();

        lstLeft.setModel(listLeft);
        lstRight.setModel(listRight);
        lstLeft.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        model1 = new DefaultComboBoxModel(projectObj.getProjectId());
        model2 = new DefaultComboBoxModel(projectObj.getProjectId());
        cbxToProjectMulti.setModel(model1);
        cbxProjectIdSearch.setModel(model2);

        if (frmMain.roleNumber == 12) {
            btnApprovalMulti.setEnabled(false);
        } else if (frmMain.roleNumber == 13) {
            btnRequestMulti.setEnabled(false);
        }

        dtcFromDate.setEnabled(false);
        dtcToDate.setEnabled(false);
        cbxProjectIdSearch.setEnabled(false);
        chkJava.setEnabled(false);
        chkNET.setEnabled(false);
        chkHTML.setEnabled(false);
        chkSQL.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
	 
	 //This file has been added -Hai
	 
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        btnCancel = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnGO = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        cbxProjectIdSearch = new javax.swing.JComboBox<>();
        radSkill = new javax.swing.JRadioButton();
        radProjectId = new javax.swing.JRadioButton();
        radDate = new javax.swing.JRadioButton();
        dtcFromDate = new com.toedter.calendar.JDateChooser();
        dtcToDate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        chkJava = new javax.swing.JCheckBox();
        chkSQL = new javax.swing.JCheckBox();
        chkNET = new javax.swing.JCheckBox();
        chkHTML = new javax.swing.JCheckBox();
        radSearchAll = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstRight = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstLeft = new javax.swing.JList<>();
        btnRequestMulti = new javax.swing.JButton();
        btnApprovalMulti = new javax.swing.JButton();
        cbxToProjectMulti = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Close Window-24.png"))); // NOI18N
        btnCancel.setText("Close");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Create A New Transfer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 204))); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setText("Find Employee:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(153, 153, 153));
        jLabel12.setText("Note: Only PM can Request, only HR can Approve");

        btnGO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Down Right-48.png"))); // NOI18N
        btnGO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGOActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Search By"));

        cbxProjectIdSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        buttonGroup1.add(radSkill);
        radSkill.setText("Skill");
        radSkill.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radSkillStateChanged(evt);
            }
        });

        buttonGroup1.add(radProjectId);
        radProjectId.setText("Current Project ID");
        radProjectId.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radProjectIdStateChanged(evt);
            }
        });

        buttonGroup1.add(radDate);
        radDate.setText("Free from date");
        radDate.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radDateStateChanged(evt);
            }
        });

        jLabel1.setText("To date");

        chkJava.setText("Java");

        chkSQL.setText("SQL");

        chkNET.setText(".NET");

        chkHTML.setText("HTML");

        buttonGroup1.add(radSearchAll);
        radSearchAll.setText("All Free at Today");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(radDate)
                    .addComponent(radProjectId)
                    .addComponent(radSkill)
                    .addComponent(radSearchAll))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(dtcFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dtcToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxProjectIdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkJava)
                                    .addComponent(chkNET))
                                .addGap(35, 35, 35)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chkHTML)
                                    .addComponent(chkSQL))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(radDate))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dtcFromDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dtcToDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radProjectId)
                    .addComponent(cbxProjectIdSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkJava)
                    .addComponent(radSkill)
                    .addComponent(chkSQL))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkNET)
                            .addComponent(chkHTML))
                        .addContainerGap(28, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(radSearchAll)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGO, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(237, 237, 237)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel10)
                        .addGap(39, 39, 39)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(btnGO, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Request / Approval", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        jScrollPane2.setViewportView(lstRight);

        jScrollPane1.setViewportView(lstLeft);

        btnRequestMulti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Invite-24.png"))); // NOI18N
        btnRequestMulti.setText("Request");
        btnRequestMulti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestMultiActionPerformed(evt);
            }
        });

        btnApprovalMulti.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Approval-24.png"))); // NOI18N
        btnApprovalMulti.setText("Approval");
        btnApprovalMulti.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApprovalMultiActionPerformed(evt);
            }
        });

        cbxToProjectMulti.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel9.setText("To Project");

        jLabel2.setText("Employee list");

        jLabel3.setText("Moved");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRequestMulti, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnApprovalMulti, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addGap(30, 30, 30)
                .addComponent(cbxToProjectMulti, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(48, 48, 48))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxToProjectMulti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRequestMulti)
                        .addGap(46, 46, 46)
                        .addComponent(btnApprovalMulti)
                        .addGap(109, 109, 109))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private java.sql.Date formatDateForSearching(java.util.Date utilDate) throws ParseException {
        long time = utilDate.getTime();
        java.sql.Date sqlDate = new java.sql.Date(time);
        return sqlDate;
    }

    private void radDateStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radDateStateChanged
        if (radDate.isSelected()) {
            dtcFromDate.setEnabled(true);
            dtcToDate.setEnabled(true);
        } else {
            dtcFromDate.setEnabled(false);
            dtcToDate.setEnabled(false);
        }
    }//GEN-LAST:event_radDateStateChanged

    private void doStuffForbtnGO(java.util.Date fromDate, java.util.Date toDate) {
        try {
            java.sql.Date fromDateSql = formatDateForSearching(fromDate);
            java.sql.Date toDateSql = formatDateForSearching(toDate);

            List<String> returnedNameList = new ArrayList<>();
            returnedNameList = transferObj.getEmpFromDateToDate(fromDateSql, toDateSql);

            for (String e : returnedNameList) {
                listLeft.addElement(e);
            }
            lstLeft.setModel(listLeft);
        } catch (ParseException ex) {
            Logger.getLogger(frmRequestTransfer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void btnGOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGOActionPerformed
        listLeft.clear();
        lstLeft.setModel(listLeft);
        if (radDate.isSelected()) {
            try {
                java.util.Date fromDate = dtcFromDate.getDate();
                java.util.Date toDate = dtcToDate.getDate();

                SimpleDateFormat sFormatDate = new SimpleDateFormat("yyyy-MM-dd");
                if (fromDate == null && toDate == null) {
                    JOptionPane.showMessageDialog(this, "Please select at least ONE date");
                } else if (fromDate == null) {
                    fromDate = new java.util.Date();
                    fromDate = sFormatDate.parse("9999-12-30");
                    doStuffForbtnGO(fromDate, toDate);
                } else if (toDate == null) {
                    toDate = new java.util.Date();
                    toDate = sFormatDate.parse("9999-12-30");
                    doStuffForbtnGO(fromDate, toDate);
                } else {
                    doStuffForbtnGO(fromDate, toDate);
                }
            } catch (ParseException ex) {
                Logger.getLogger(frmRequestTransfer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (radProjectId.isSelected()) {
            List<String> returnedNameList = new ArrayList<>();
            returnedNameList = transferObj.getEmpByCurrentProject((String) cbxProjectIdSearch.getSelectedItem());

            for (String e : returnedNameList) {
                listLeft.addElement(e);
            }
            lstLeft.setModel(listLeft);
        } else if (radSkill.isSelected()) {
            StringBuilder skillList = new StringBuilder();
            if (chkJava.isSelected()) {
                skillList.append("%Java%");
            }
            if (chkNET.isSelected()) {
                skillList.append("%.Net%");
            }
            if (chkHTML.isSelected()) {
                skillList.append("%HTML5%");
            }
            if (chkSQL.isSelected()) {
                skillList.append("%SQL%");
            }

            List<String> returnListHasSkill = new ArrayList<>();
            returnListHasSkill = empObj.getEmpBySkill(skillList);

            for (String e : returnListHasSkill) {
                listLeft.addElement(e);
            }
            lstLeft.setModel(listLeft);
        } else if (radSearchAll.isSelected()) {
            try {
                List<String> returnedEmpAll = new ArrayList<>();
                returnedEmpAll = transferObj.getAllEmp();

                java.util.Date dateToday = new java.util.Date();
                java.sql.Date dateTodaySql = formatDateForSearching(dateToday);

                for (String e : returnedEmpAll) {
                    boolean isThisEmpFree = empObj.isFreeOn(e, dateTodaySql);
                    if (isThisEmpFree) {
                        listLeft.addElement(e);
                    }
                }
            } catch (ParseException ex) {
                Logger.getLogger(frmRequestTransfer.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select one option");
        }
    }//GEN-LAST:event_btnGOActionPerformed

    private void radProjectIdStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radProjectIdStateChanged
        if (radProjectId.isSelected()) {
            cbxProjectIdSearch.setEnabled(true);
        } else {
            cbxProjectIdSearch.setEnabled(false);
        }
    }//GEN-LAST:event_radProjectIdStateChanged

    private void radSkillStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radSkillStateChanged
        if (radSkill.isSelected()) {
            chkJava.setEnabled(true);
            chkNET.setEnabled(true);
            chkHTML.setEnabled(true);
            chkSQL.setEnabled(true);
        } else {
            chkJava.setEnabled(false);
            chkNET.setEnabled(false);
            chkHTML.setEnabled(false);
            chkSQL.setEnabled(false);
        }
    }//GEN-LAST:event_radSkillStateChanged

    private void btnRequestMultiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestMultiActionPerformed
        int[] fromIndex = lstLeft.getSelectedIndices();
        if (fromIndex.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select at least one Employee");
        } else {
            try {
                dlgAskDateForRequest askDateForm = new dlgAskDateForRequest(null, true);
                askDateForm.setVisible(true);

                if (fromDateToRequest != null || toDateToRequest != null) {
                    java.sql.Date fromDateSqlToRequest = formatDateForSearching(fromDateToRequest);
                    java.sql.Date toDateSqlToRequest = formatDateForSearching(toDateToRequest);

                    for (int e : fromIndex) {
                        String selectedItemInList = lstLeft.getModel().getElementAt(e);
                        System.out.println(selectedItemInList);
                        boolean checkThisEmpFree = transferObj.checkEmpFreeFromDateToDate(selectedItemInList, fromDateSqlToRequest, toDateSqlToRequest);

                        int count = 0;
                        for (LocalDate date = fromDateSqlToRequest.toLocalDate(); date.isBefore(toDateSqlToRequest.toLocalDate()); date = date.plusDays(1)) {
                            if (!empObj.isFreeOn(selectedItemInList, java.sql.Date.valueOf(date))) {
                                count++;
                            }
                        }
                        if (count > 0) {
                            JOptionPane.showMessageDialog(this, "This employee is busy on those date");
                        } else if (checkThisEmpFree) {
                            File file = new File("../EMPtranfermanagement/passphrase.txt");
                            Transfer transferToAdd = new Transfer();

                            String id = "";
                            try {
                                Scanner fileScanner = new Scanner(file);
                                id = "TRF" + fileScanner.nextLine();
                                FileWriter fileStream = new FileWriter("../EMPtranfermanagement/passphrase.txt");
                                BufferedWriter out = new BufferedWriter(fileStream);
                                while (fileScanner.hasNextLine()) {
                                    String next = fileScanner.nextLine();
                                    if (next.equals("\n")) {
                                        out.newLine();
                                    } else {
                                        out.write(next);
                                    }
                                    out.newLine();
                                }
                                out.close();
                            } catch (FileNotFoundException ex) {
                                ex.printStackTrace();
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                            transferToAdd.setId(id);
                            transferToAdd.setEmployeeId(selectedItemInList);
                            transferToAdd.setFromProjectId(transferObj.getCurrentProjectIdOfEmp(selectedItemInList));
                            transferToAdd.setToProjectId((String) cbxToProjectMulti.getSelectedItem());
                            transferToAdd.setStatus("Pending " + frmMain.currentPMLoggedIn);
                            transferToAdd.setApprovedBy("NULL");
                            transferToAdd.setStartDate(fromDateSqlToRequest);
                            transferToAdd.setEndDate(toDateSqlToRequest);

                            transferObj.add(transferToAdd);

                            Object[] from = lstLeft.getSelectedValues();

                            // Add elements from left List to right List
                            for (int i = 0; i < from.length; i++) {
                                //System.out.println(from[i]);
                                listRight.addElement(from[i]);
                            }

                            // Remove selected element
                            for (int i = (fromIndex.length - 1); i >= 0; i--) {
                                listLeft.remove(fromIndex[i]);
                            }
                        }

                    }

                }
            } catch (ParseException ex) {
                Logger.getLogger(frmRequestTransfer.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
    }//GEN-LAST:event_btnRequestMultiActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnApprovalMultiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApprovalMultiActionPerformed
        int[] fromIndex = lstLeft.getSelectedIndices();
        if (fromIndex.length == 0) {
            JOptionPane.showMessageDialog(this, "Please select at least one Employee");
        } else {
            try {
                dlgAskDateForRequest askDateForm = new dlgAskDateForRequest(null, true);
                askDateForm.setVisible(true);

                if (fromDateToRequest != null || toDateToRequest != null) {
                    java.sql.Date fromDateSqlToRequest = formatDateForSearching(fromDateToRequest);
                    java.sql.Date toDateSqlToRequest = formatDateForSearching(toDateToRequest);

                    for (int e : fromIndex) {
                        String selectedItemInList = lstLeft.getModel().getElementAt(e);
                        System.out.println(selectedItemInList);
                        boolean checkThisEmpFree = transferObj.checkEmpFreeFromDateToDate(selectedItemInList, fromDateSqlToRequest, toDateSqlToRequest);

                        int count = 0;
                        for (LocalDate date = fromDateSqlToRequest.toLocalDate(); date.isBefore(toDateSqlToRequest.toLocalDate()); date = date.plusDays(1)) {
                            if (!empObj.isFreeOn(selectedItemInList, java.sql.Date.valueOf(date))) {
                                count++;
                            }
                        }
                        if (count > 0) {
                            JOptionPane.showMessageDialog(this, "This employee is busy on those date");
                        } else if (checkThisEmpFree) {
                            File file = new File("../EMPtranfermanagement/passphrase.txt");
                            Transfer transferToAdd = new Transfer();

                            String id = "";
                            try {
                                Scanner fileScanner = new Scanner(file);
                                id = "TRF" + fileScanner.nextLine();
                                FileWriter fileStream = new FileWriter("../EMPtranfermanagement/passphrase.txt");
                                BufferedWriter out = new BufferedWriter(fileStream);
                                while (fileScanner.hasNextLine()) {
                                    String next = fileScanner.nextLine();
                                    if (next.equals("\n")) {
                                        out.newLine();
                                    } else {
                                        out.write(next);
                                    }
                                    out.newLine();
                                }
                                out.close();
                            } catch (FileNotFoundException ex) {
                                ex.printStackTrace();
                            } catch (IOException ex) {
                                ex.printStackTrace();
                            }
                            transferToAdd.setId(id);
                            transferToAdd.setEmployeeId(selectedItemInList);
                            transferToAdd.setFromProjectId(transferObj.getCurrentProjectIdOfEmp(selectedItemInList));
                            transferToAdd.setToProjectId((String) cbxToProjectMulti.getSelectedItem());
                            transferToAdd.setStatus("Approved " + frmMain.currentPMLoggedIn);
                            transferToAdd.setApprovedBy(frmMain.currentHRLoggedIn);
                            transferToAdd.setStartDate(fromDateSqlToRequest);
                            transferToAdd.setEndDate(toDateSqlToRequest);

                            transferObj.add(transferToAdd);
                            
                            Object[] from = lstLeft.getSelectedValues();

                            // Add elements from left List to right List
                            for (int i = 0; i < from.length; i++) {
                                //System.out.println(from[i]);
                                listRight.addElement(from[i]);
                            }

                            // Remove selected element
                            for (int i = (fromIndex.length - 1); i >= 0; i--) {
                                listLeft.remove(fromIndex[i]);
                            }
                        }

                    }
                    //JOptionPane.showMessageDialog(this, "Done.");
                }
            } catch (ParseException ex) {
                Logger.getLogger(frmRequestTransfer.class.getName()).log(Level.SEVERE, null, ex);

            }
        }
    }//GEN-LAST:event_btnApprovalMultiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRequestTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRequestTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRequestTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRequestTransfer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmRequestTransfer dialog = new frmRequestTransfer(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprovalMulti;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnGO;
    private javax.swing.JButton btnRequestMulti;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox<String> cbxProjectIdSearch;
    public static javax.swing.JComboBox<String> cbxToProjectMulti;
    private javax.swing.JCheckBox chkHTML;
    private javax.swing.JCheckBox chkJava;
    private javax.swing.JCheckBox chkNET;
    private javax.swing.JCheckBox chkSQL;
    private com.toedter.calendar.JDateChooser dtcFromDate;
    private com.toedter.calendar.JDateChooser dtcToDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> lstLeft;
    private javax.swing.JList<String> lstRight;
    private javax.swing.JRadioButton radDate;
    private javax.swing.JRadioButton radProjectId;
    private javax.swing.JRadioButton radSearchAll;
    private javax.swing.JRadioButton radSkill;
    // End of variables declaration//GEN-END:variables
}
