/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentation;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.html.WebColors;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import databaseaccess.EmployeeDAOImp;
import databaseaccess.ProjectDAOImp;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import model.Transfer;

/**
 *
 * @author Koba
 */
public class frmReportForm extends javax.swing.JDialog {

    EmployeeDAOImp empObj;
    ProjectDAOImp projectObj;
    DefaultComboBoxModel model1, model2;

    /**
     * Creates new form frmReportForm
     */
    public frmReportForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        empObj = new EmployeeDAOImp();
        radInMonth.setSelected(true);
        projectObj = new ProjectDAOImp();
        model1 = new DefaultComboBoxModel(projectObj.getProjectId());
        model2 = new DefaultComboBoxModel(projectObj.getProjectId());
        cbxFromProject.setModel(model1);
        cbxToProject.setModel(model2);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        radInDateRange = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        dtcFromDate = new com.toedter.calendar.JDateChooser();
        dtcToDate = new com.toedter.calendar.JDateChooser();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        radInMonth = new javax.swing.JRadioButton();
        dtcMonthChooser = new com.toedter.calendar.JMonthChooser();
        dtcYearChooser = new com.toedter.calendar.JYearChooser();
        jPanel4 = new javax.swing.JPanel();
        cbxFromProject = new javax.swing.JComboBox<>();
        cbxToProject = new javax.swing.JComboBox<>();
        radInProject = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbxAndOr = new javax.swing.JComboBox<>();
        btnGenerate = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        radAllRecord = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Report transfers", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12), new java.awt.Color(0, 0, 255))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        buttonGroup1.add(radInDateRange);
        radInDateRange.setText("Date range");

        jLabel2.setText("From date");

        dtcFromDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dtcFromDateMouseClicked(evt);
            }
        });

        dtcToDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                dtcToDateMouseClicked(evt);
            }
        });

        jLabel1.setText("To date");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(radInDateRange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 115, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(dtcFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(dtcToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtcFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(radInDateRange)
                        .addComponent(jLabel2)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dtcToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        buttonGroup1.add(radInMonth);
        radInMonth.setText("In particular month");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radInMonth)
                .addGap(18, 18, 18)
                .addComponent(dtcMonthChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(dtcYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dtcMonthChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radInMonth)
                    .addComponent(dtcYearChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        cbxFromProject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxFromProjectItemStateChanged(evt);
            }
        });

        cbxToProject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxToProjectItemStateChanged(evt);
            }
        });

        buttonGroup1.add(radInProject);
        radInProject.setText("In particular project");

        jLabel3.setText("From Project");

        jLabel4.setText("To Project");

        cbxAndOr.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "And", "Or" }));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(radInProject)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 95, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxFromProject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxToProject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(cbxAndOr, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(radInProject)
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxFromProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cbxAndOr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxToProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(21, 21, 21))
        );

        btnGenerate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Combo Chart-48.png"))); // NOI18N
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        buttonGroup1.add(radAllRecord);
        radAllRecord.setText("All records");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(radAllRecord)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(radAllRecord)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(40, 40, 40)
                        .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel2, jPanel3, jPanel4});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private java.sql.Date formatDateForSearching(java.util.Date utilDate) throws ParseException {
        long time = utilDate.getTime();
        java.sql.Date sqlDate = new java.sql.Date(time);
        return sqlDate;
    }

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        Date dateNow = new Date();
        SimpleDateFormat df = new SimpleDateFormat("dd_MM_yyyy_HH_mm_ss");

        System.out.println(dtcMonthChooser.getMonth());
        System.out.println(dtcYearChooser.getYear());

        if (radInMonth.isSelected()) {
            List<Transfer> transferList = new ArrayList<>();

            transferList = empObj.searchRecordByMonth(dtcMonthChooser.getMonth() + 1, dtcYearChooser.getYear());

            Document document = new Document();
            try {
                Font fontTitle = new Font(FontFamily.HELVETICA, 20, Font.BOLD);

                String fileName = "../EMPtranfermanagement/Report" + " " + df.format(dateNow) + ".pdf";
                PdfWriter.getInstance(document, new FileOutputStream(fileName));

                document.open();

                Image imageLogo = Image.getInstance(this.getClass().getResource("/images/onlinelogomaker-afterscale2.png"));
                imageLogo.setAbsolutePosition(20, 750f);
                document.add(imageLogo);

                Paragraph titlePara = new Paragraph("EMP Transfer Application", fontTitle);
                titlePara.setAlignment(Element.ALIGN_CENTER);
                titlePara.setSpacingAfter(5);
                document.add(titlePara);

                Paragraph creditPara = new Paragraph("Created by Ly Thanh Hai + Nguyen Khanh", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC));
                creditPara.setAlignment(Element.ALIGN_CENTER);
                creditPara.setSpacingAfter(10);
                document.add(creditPara);

                Paragraph slashPara = new Paragraph("Transfer records at " + (dtcMonthChooser.getMonth() + 1) + "/" + dtcYearChooser.getYear(), FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD));
                slashPara.setSpacingAfter(40);
                slashPara.setAlignment(Element.ALIGN_CENTER);
                document.add(slashPara);

                PdfPTable table = new PdfPTable(5);
                table.setWidthPercentage(100);

                Font font = new Font(FontFamily.HELVETICA, 15, Font.BOLD);
                Paragraph paragraphCellHeading = new Paragraph("Report", font);

                PdfPCell cellHeading = new PdfPCell(paragraphCellHeading);
                BaseColor myColor = WebColors.getRGBColor("#41a5c2");
                cellHeading.setColspan(5);
                cellHeading.setBackgroundColor(myColor);
                cellHeading.setFixedHeight(30.3f);
                cellHeading.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cellHeading.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cellHeading);

                Font fBody = new Font(FontFamily.HELVETICA, 13, Font.NORMAL, GrayColor.BLACK);

                PdfPCell cellTitle1 = new PdfPCell(new Phrase("Transfer ID", fBody));
                cellTitle1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cellTitle1.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cellTitle1);
                PdfPCell cellTitle2 = new PdfPCell(new Phrase("Emp ID", fBody));
                cellTitle2.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cellTitle2.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cellTitle2);
                PdfPCell cellTitle3 = new PdfPCell(new Phrase("From Project", fBody));
                cellTitle3.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cellTitle3.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cellTitle3);
                PdfPCell cellTitle4 = new PdfPCell(new Phrase("To Project", fBody));
                cellTitle4.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cellTitle4.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cellTitle4);
                PdfPCell cellTitleStatus = new PdfPCell(new Phrase("Status", fBody));
                cellTitleStatus.setVerticalAlignment(Element.ALIGN_MIDDLE);
                cellTitleStatus.setHorizontalAlignment(Element.ALIGN_CENTER);
                table.addCell(cellTitleStatus);

                int cellColorCheck = 1;
                for (Transfer e : transferList) {
                    PdfPCell cellBody1 = new PdfPCell(new Phrase(e.getId()));
                    PdfPCell cellBody2 = new PdfPCell(new Phrase(e.getEmployeeId()));
                    PdfPCell cellBody3 = new PdfPCell(new Phrase(e.getFromProjectId()));
                    PdfPCell cellBody4 = new PdfPCell(new Phrase(e.getToProjectId()));
                    PdfPCell cellBody5 = new PdfPCell(new Phrase(e.getStatus()));
                    if (cellColorCheck % 2 == 1) {
                        cellBody1.setBackgroundColor(BaseColor.ORANGE);
                        cellBody2.setBackgroundColor(BaseColor.ORANGE);
                        cellBody3.setBackgroundColor(BaseColor.ORANGE);
                        cellBody4.setBackgroundColor(BaseColor.ORANGE);
                        cellBody5.setBackgroundColor(BaseColor.ORANGE);
                    }
                    table.addCell(cellBody1);
                    table.addCell(cellBody2);
                    table.addCell(cellBody3);
                    table.addCell(cellBody4);
                    table.addCell(cellBody5);
                    cellColorCheck++;
                }

                document.add(table);

                JOptionPane.showMessageDialog(this, "Report saved");
                
                if(Desktop.isDesktopSupported()) {
                        File reportFile = new File(fileName);
                        Desktop.getDesktop().open(reportFile);;
                    }

                document.close();
            } catch (DocumentException | FileNotFoundException ex) {
                Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (radInDateRange.isSelected()) {
            try {
                List<Transfer> transferList = new ArrayList<>();

                java.sql.Date fromDateSql = formatDateForSearching(dtcFromDate.getDate());
                java.sql.Date toDateSql = formatDateForSearching(dtcToDate.getDate());
                transferList = empObj.searchRecordByDate(fromDateSql, toDateSql);

                Document document = new Document();
                try {
                    Font fontTitle = new Font(FontFamily.HELVETICA, 20, Font.BOLD);
                    
                    String fileName = "../EMPtranfermanagement/Report" + " " + df.format(dateNow) + ".pdf";
                    PdfWriter.getInstance(document, new FileOutputStream(fileName));

                    document.open();

                    Image imageLogo = Image.getInstance(this.getClass().getResource("/images/onlinelogomaker-afterscale2.png"));
                    imageLogo.setAbsolutePosition(20, 750f);
                    document.add(imageLogo);

                    Paragraph titlePara = new Paragraph("EMP Transfer Application", fontTitle);
                    titlePara.setAlignment(Element.ALIGN_CENTER);
                    titlePara.setSpacingAfter(5);
                    document.add(titlePara);

                    Paragraph creditPara = new Paragraph("Created by Ly Thanh Hai + Nguyen Khanh", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC));
                    creditPara.setAlignment(Element.ALIGN_CENTER);
                    creditPara.setSpacingAfter(10);
                    document.add(creditPara);

                    SimpleDateFormat df2 = new SimpleDateFormat("dd/MM/yyyy");
                    String fromDate = df2.format(dtcFromDate.getDate());
                    String toDate = df2.format(dtcToDate.getDate());

                    Paragraph slashPara = new Paragraph("Transfer records from " + fromDate + " to " + toDate, FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD));
                    slashPara.setSpacingAfter(40);
                    slashPara.setAlignment(Element.ALIGN_CENTER);
                    document.add(slashPara);

                    PdfPTable table = new PdfPTable(5);
                    table.setWidthPercentage(100);

                    Font font = new Font(FontFamily.HELVETICA, 15, Font.BOLD);
                    Paragraph paragraphCellHeading = new Paragraph("Report", font);

                    PdfPCell cellHeading = new PdfPCell(paragraphCellHeading);
                    BaseColor myColor = WebColors.getRGBColor("#41a5c2");
                    cellHeading.setColspan(5);
                    cellHeading.setBackgroundColor(myColor);
                    cellHeading.setFixedHeight(30.3f);
                    cellHeading.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellHeading.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellHeading);

                    Font fBody = new Font(FontFamily.HELVETICA, 13, Font.NORMAL, GrayColor.BLACK);

                    PdfPCell cellTitle1 = new PdfPCell(new Phrase("Transfer ID", fBody));
                    cellTitle1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle1);
                    PdfPCell cellTitle2 = new PdfPCell(new Phrase("Emp ID", fBody));
                    cellTitle2.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle2);
                    PdfPCell cellTitle3 = new PdfPCell(new Phrase("From Project", fBody));
                    cellTitle3.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle3.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle3);
                    PdfPCell cellTitle4 = new PdfPCell(new Phrase("To Project", fBody));
                    cellTitle4.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle4.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle4);
                    PdfPCell cellTitleStatus = new PdfPCell(new Phrase("Status", fBody));
                    cellTitleStatus.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitleStatus.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitleStatus);

                    int cellColorCheck = 1;
                    for (Transfer e : transferList) {
                        PdfPCell cellBody1 = new PdfPCell(new Phrase(e.getId()));
                        PdfPCell cellBody2 = new PdfPCell(new Phrase(e.getEmployeeId()));
                        PdfPCell cellBody3 = new PdfPCell(new Phrase(e.getFromProjectId()));
                        PdfPCell cellBody4 = new PdfPCell(new Phrase(e.getToProjectId()));
                        PdfPCell cellBody5 = new PdfPCell(new Phrase(e.getStatus()));
                        if (cellColorCheck % 2 == 1) {
                            cellBody1.setBackgroundColor(BaseColor.ORANGE);
                            cellBody2.setBackgroundColor(BaseColor.ORANGE);
                            cellBody3.setBackgroundColor(BaseColor.ORANGE);
                            cellBody4.setBackgroundColor(BaseColor.ORANGE);
                            cellBody5.setBackgroundColor(BaseColor.ORANGE);
                        }
                        table.addCell(cellBody1);
                        table.addCell(cellBody2);
                        table.addCell(cellBody3);
                        table.addCell(cellBody4);
                        table.addCell(cellBody5);
                        cellColorCheck++;
                    }

                    document.add(table);
                    JOptionPane.showMessageDialog(this, "Report saved");
                    
                    if(Desktop.isDesktopSupported()) {
                        File reportFile = new File(fileName);
                        Desktop.getDesktop().open(reportFile);;
                    }

                    document.close();
                } catch (DocumentException | FileNotFoundException ex) {
                    Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (ParseException ex) {
                Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        if (radInProject.isSelected()) {
            String fromProjectId = (String) cbxFromProject.getSelectedItem();
            String toProjectId = (String) cbxToProject.getSelectedItem();
            List<Transfer> transferList = new ArrayList<>();
            String andOr = "";
            if (cbxAndOr.getSelectedItem().equals("And")) {
                andOr = "and";
                transferList = empObj.searchRecordByFromAndToProject(fromProjectId, toProjectId, andOr);
            } else {
                andOr = "or";
                transferList = empObj.searchRecordByFromAndToProject(fromProjectId, toProjectId, andOr);
            }
            
            Document document = new Document();
                try {
                    Font fontTitle = new Font(FontFamily.HELVETICA, 20, Font.BOLD);
                    
                    String fileName = "../EMPtranfermanagement/Report" + " " + df.format(dateNow) + ".pdf";
                    PdfWriter.getInstance(document, new FileOutputStream(fileName));

                    document.open();

                    Image imageLogo = Image.getInstance(this.getClass().getResource("/images/onlinelogomaker-afterscale2.png"));
                    imageLogo.setAbsolutePosition(20, 750f);
                    document.add(imageLogo);

                    Paragraph titlePara = new Paragraph("EMP Transfer Application", fontTitle);
                    titlePara.setAlignment(Element.ALIGN_CENTER);
                    titlePara.setSpacingAfter(5);
                    document.add(titlePara);

                    Paragraph creditPara = new Paragraph("Created by Ly Thanh Hai + Nguyen Khanh", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC));
                    creditPara.setAlignment(Element.ALIGN_CENTER);
                    creditPara.setSpacingAfter(10);
                    document.add(creditPara);


                    Paragraph slashPara = new Paragraph("Transfer records from Project ID " + fromProjectId 
                            + " " + andOr + " " + toProjectId, FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD));
                    slashPara.setSpacingAfter(40);
                    slashPara.setAlignment(Element.ALIGN_CENTER);
                    document.add(slashPara);

                    PdfPTable table = new PdfPTable(5);
                    table.setWidthPercentage(100);

                    Font font = new Font(FontFamily.HELVETICA, 15, Font.BOLD);
                    Paragraph paragraphCellHeading = new Paragraph("Report", font);

                    PdfPCell cellHeading = new PdfPCell(paragraphCellHeading);
                    BaseColor myColor = WebColors.getRGBColor("#41a5c2");
                    cellHeading.setColspan(5);
                    cellHeading.setBackgroundColor(myColor);
                    cellHeading.setFixedHeight(30.3f);
                    cellHeading.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellHeading.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellHeading);

                    Font fBody = new Font(FontFamily.HELVETICA, 13, Font.NORMAL, GrayColor.BLACK);

                    PdfPCell cellTitle1 = new PdfPCell(new Phrase("Transfer ID", fBody));
                    cellTitle1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle1);
                    PdfPCell cellTitle2 = new PdfPCell(new Phrase("Emp ID", fBody));
                    cellTitle2.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle2);
                    PdfPCell cellTitle3 = new PdfPCell(new Phrase("From Project", fBody));
                    cellTitle3.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle3.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle3);
                    PdfPCell cellTitle4 = new PdfPCell(new Phrase("To Project", fBody));
                    cellTitle4.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle4.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle4);
                    PdfPCell cellTitleStatus = new PdfPCell(new Phrase("Status", fBody));
                    cellTitleStatus.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitleStatus.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitleStatus);

                    int cellColorCheck = 1;
                    for (Transfer e : transferList) {
                        PdfPCell cellBody1 = new PdfPCell(new Phrase(e.getId()));
                        PdfPCell cellBody2 = new PdfPCell(new Phrase(e.getEmployeeId()));
                        PdfPCell cellBody3 = new PdfPCell(new Phrase(e.getFromProjectId()));
                        PdfPCell cellBody4 = new PdfPCell(new Phrase(e.getToProjectId()));
                        PdfPCell cellBody5 = new PdfPCell(new Phrase(e.getStatus()));
                        if (cellColorCheck % 2 == 1) {
                            cellBody1.setBackgroundColor(BaseColor.ORANGE);
                            cellBody2.setBackgroundColor(BaseColor.ORANGE);
                            cellBody3.setBackgroundColor(BaseColor.ORANGE);
                            cellBody4.setBackgroundColor(BaseColor.ORANGE);
                            cellBody5.setBackgroundColor(BaseColor.ORANGE);
                        }
                        table.addCell(cellBody1);
                        table.addCell(cellBody2);
                        table.addCell(cellBody3);
                        table.addCell(cellBody4);
                        table.addCell(cellBody5);
                        cellColorCheck++;
                    }

                    document.add(table);
                    JOptionPane.showMessageDialog(this, "Report saved");
                    
                    if(Desktop.isDesktopSupported()) {
                        File reportFile = new File(fileName);
                        Desktop.getDesktop().open(reportFile);;
                    }

                    document.close();
                } catch (DocumentException | FileNotFoundException ex) {
                    Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        if(radAllRecord.isSelected()) {
            List<Transfer> transferList = new ArrayList<>();
            transferList = empObj.searchAllRecord();
            
            Document document = new Document();
                try {
                    Font fontTitle = new Font(FontFamily.HELVETICA, 20, Font.BOLD);
                    
                    String fileName = "../EMPtranfermanagement/Report" + " " + df.format(dateNow) + ".pdf";
                    PdfWriter.getInstance(document, new FileOutputStream(fileName));

                    document.open();

                    Image imageLogo = Image.getInstance(this.getClass().getResource("/images/onlinelogomaker-afterscale2.png"));
                    imageLogo.setAbsolutePosition(20, 750f);
                    document.add(imageLogo);

                    Paragraph titlePara = new Paragraph("EMP Transfer Application", fontTitle);
                    titlePara.setAlignment(Element.ALIGN_CENTER);
                    titlePara.setSpacingAfter(5);
                    document.add(titlePara);

                    Paragraph creditPara = new Paragraph("Created by Ly Thanh Hai + Nguyen Khanh", FontFactory.getFont(FontFactory.HELVETICA, 10, Font.ITALIC));
                    creditPara.setAlignment(Element.ALIGN_CENTER);
                    creditPara.setSpacingAfter(10);
                    document.add(creditPara);


                    Paragraph slashPara = new Paragraph("All transfer records",
                            FontFactory.getFont(FontFactory.HELVETICA, 15, Font.BOLD));
                    slashPara.setSpacingAfter(40);
                    slashPara.setAlignment(Element.ALIGN_CENTER);
                    document.add(slashPara);

                    PdfPTable table = new PdfPTable(5);
                    table.setWidthPercentage(100);

                    Font font = new Font(FontFamily.HELVETICA, 15, Font.BOLD);
                    Paragraph paragraphCellHeading = new Paragraph("Report", font);

                    PdfPCell cellHeading = new PdfPCell(paragraphCellHeading);
                    BaseColor myColor = WebColors.getRGBColor("#41a5c2");
                    cellHeading.setColspan(5);
                    cellHeading.setBackgroundColor(myColor);
                    cellHeading.setFixedHeight(30.3f);
                    cellHeading.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellHeading.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellHeading);

                    Font fBody = new Font(FontFamily.HELVETICA, 13, Font.NORMAL, GrayColor.BLACK);

                    PdfPCell cellTitle1 = new PdfPCell(new Phrase("Transfer ID", fBody));
                    cellTitle1.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle1.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle1);
                    PdfPCell cellTitle2 = new PdfPCell(new Phrase("Emp ID", fBody));
                    cellTitle2.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle2);
                    PdfPCell cellTitle3 = new PdfPCell(new Phrase("From Project", fBody));
                    cellTitle3.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle3.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle3);
                    PdfPCell cellTitle4 = new PdfPCell(new Phrase("To Project", fBody));
                    cellTitle4.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitle4.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitle4);
                    PdfPCell cellTitleStatus = new PdfPCell(new Phrase("Status", fBody));
                    cellTitleStatus.setVerticalAlignment(Element.ALIGN_MIDDLE);
                    cellTitleStatus.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cellTitleStatus);

                    int cellColorCheck = 1;
                    for (Transfer e : transferList) {
                        PdfPCell cellBody1 = new PdfPCell(new Phrase(e.getId()));
                        PdfPCell cellBody2 = new PdfPCell(new Phrase(e.getEmployeeId()));
                        PdfPCell cellBody3 = new PdfPCell(new Phrase(e.getFromProjectId()));
                        PdfPCell cellBody4 = new PdfPCell(new Phrase(e.getToProjectId()));
                        PdfPCell cellBody5 = new PdfPCell(new Phrase(e.getStatus()));
                        if (cellColorCheck % 2 == 1) {
                            cellBody1.setBackgroundColor(BaseColor.ORANGE);
                            cellBody2.setBackgroundColor(BaseColor.ORANGE);
                            cellBody3.setBackgroundColor(BaseColor.ORANGE);
                            cellBody4.setBackgroundColor(BaseColor.ORANGE);
                            cellBody5.setBackgroundColor(BaseColor.ORANGE);
                        }
                        table.addCell(cellBody1);
                        table.addCell(cellBody2);
                        table.addCell(cellBody3);
                        table.addCell(cellBody4);
                        table.addCell(cellBody5);
                        cellColorCheck++;
                    }

                    document.add(table);
                    JOptionPane.showMessageDialog(this, "Report saved");
                    
                    if(Desktop.isDesktopSupported()) {
                        File reportFile = new File(fileName);
                        Desktop.getDesktop().open(reportFile);;
                    }

                    document.close();
                } catch (DocumentException | FileNotFoundException ex) {
                    Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(frmReportForm.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void dtcFromDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dtcFromDateMouseClicked
        
    }//GEN-LAST:event_dtcFromDateMouseClicked

    private void dtcToDateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_dtcToDateMouseClicked

    }//GEN-LAST:event_dtcToDateMouseClicked

    private void cbxFromProjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxFromProjectItemStateChanged
        radInProject.setSelected(true);
    }//GEN-LAST:event_cbxFromProjectItemStateChanged

    private void cbxToProjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxToProjectItemStateChanged
        radInProject.setSelected(true);
    }//GEN-LAST:event_cbxToProjectItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmReportForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmReportForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmReportForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmReportForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                frmReportForm dialog = new frmReportForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> cbxAndOr;
    private javax.swing.JComboBox<String> cbxFromProject;
    private javax.swing.JComboBox<String> cbxToProject;
    private com.toedter.calendar.JDateChooser dtcFromDate;
    private com.toedter.calendar.JMonthChooser dtcMonthChooser;
    private com.toedter.calendar.JDateChooser dtcToDate;
    private com.toedter.calendar.JYearChooser dtcYearChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton radAllRecord;
    private javax.swing.JRadioButton radInDateRange;
    private javax.swing.JRadioButton radInMonth;
    private javax.swing.JRadioButton radInProject;
    // End of variables declaration//GEN-END:variables
}
